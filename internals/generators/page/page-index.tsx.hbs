/**
*
* {{ properCase ComponentName }}
*
*/
import React, { useState{{#if wantMemo}}, memo{{/if}}{{#if wantSaga}}, useEffect{{/if}}{{#if wantDashboard}}, useMemo{{/if}}  } from 'react';
{{#if wantHeaders}}import { Helmet } from 'react-helmet-async';{{/if}}
{{#if wantTranslations}}import { useTranslation } from 'react-i18next';{{/if}}{{#if wantSlice}}import { useSelector, useDispatch } from 'react-redux';{{/if}}
{{#if wantStyledComponents}}import styled from 'styled-components/macro';{{/if}}{{#if wantDashboard }}import { Responsive } from 'react-grid-layout';
import { withSize } from 'react-sizeme';
import { createTheme as createMuiTheme, MuiThemeProvider } from '@mui/material/styles';{{/if}}{{#if wantSlice}}
{{#if wantSaga}}import { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';{{else}}import { useInjectReducer } from 'utils/redux-injectors';{{/if}}{{else}}{{#if wantSaga}}import { useInjectSaga } from 'utils/redux-injectors';{{/if}}{{/if}}
{{#if wantSlice}}import { {{#if wantSaga}}{{ camelCase ServiceName }}sActions,{{/if}}{{ camelCase ServiceName }}sReducer, {{ camelCase ServiceName }}Key } from 'services/{{ dashCase ServiceName }}/{{ dashCase ServiceName }}-reducer';
import { select{{> ServiceModel }}s, select{{> ServiceModel }}IsLoading } from 'services/{{ dashCase ServiceName }}/{{ dashCase ServiceName }}-selectors';{{/if}}
{{#if wantSaga}}{{#if wantCreate}}import { create{{> ServiceModel }}Saga } from 'services/{{ dashCase ServiceName }}/sagas/{{ dashCase ServiceName }}-saga-create';{{/if}}
{{#if wantReadAll}}import { getAll{{> ServiceModel }}sSaga } from 'services/{{ dashCase ServiceName }}/sagas/{{ dashCase ServiceName }}-saga-get-all';{{/if}}
{{#if wantReadByID}}import { get{{> ServiceModel }}ByIdSaga } from 'services/{{ dashCase ServiceName }}/sagas/{{ dashCase ServiceName }}-saga-get-by-id';{{/if}}
{{#if wantUpdate}}import { update{{> ServiceModel }}Saga } from 'services/{{ dashCase ServiceName }}/sagas/{{ dashCase ServiceName }}-saga-update';{{/if}}{{#if wantDelete}}import { delete{{> ServiceModel }}Saga } from 'services/{{ dashCase ServiceName }}/sagas/{{ dashCase ServiceName }}-saga-delete';{{/if}}{{/if}}
{{#if wantSlice }}import Table from 'components/Table';{{/if}}{{#if wantDashboard }}import { useQueryParam, useLocalStorage } from 'utils';{{#each widgets}}import {{this}} from '{{ getWidgetPath this ../widgetProps }}/{{this}}';
import { {{this}}Property }  from 'widgets';{{/each}}{{/if}}import Breadcrumb from 'components/Breadcrumb';
import { DashboardFilter } from 'components/panels/SideFilterPanel/SideFilterPanel';
import { PageLayout } from 'components/PageLayout/PageLayout';
import { FilterNames, Filters{{#if wantFilters}}, SidePanelOpenState{{/if}}{{#if wantSlice}}{{#if wantModel}}, {{ properCase ModelName }}s{{/if}}{{/if}}{{#if wantDashboard }}, LoadingValue{{/if}} } from 'models';
import { buildAvailableFiltersFromData, buildFiltersFromData } from 'utils';
import { Page, PageProps } from 'pages';
{{#if wantTranslations}}import { messages } from './messages';{{/if}}
import Constant from 'constants/index';
import Switch from '@mui/material/Switch';

{{#if wantDashboard}}
import 'pages/../../node_modules/react-grid-layout/css/styles.css';
import 'pages/../../node_modules/react-resizable/css/styles.css';
{{/if}}
import 'scss/main.scss';
import './{{ properCase ComponentName }}.scss';

{{#if wantRules}}
    import { RulesPanel } from 'components/panels/RulesPanel/RulesPanel';
    import { rulesPanelActions, rulesPanelKey, rulesPanelReducer } from 'services/rules-panel/rules-panel-reducer';
{{/if}}

interface {{ properCase ComponentName }}Props extends PageProps{}

{{#if wantLayout}}
const ResponsiveReactGridLayout = withSize({ monitorHeight: true })(Responsive);
{{else}}
const GridLayout = withSize()(Responsive);
{{/if}}

const pageFilters = [
   {{#each widgets}}...({{this}}Property.defaultFilters||[]), {{/each}}
];

const originalLayouts = {
    lg: [
    {{#each widgets}}
        {
            w: 4,
            h: 3,
            x: 0,
            y: 0,
            i: 'key-{{ dashCase this }}-{{@index}}',
        },
    {{/each}}
    ],
};


{{#if wantMemo}}
export const {{ properCase ComponentName }}: Page<{{ properCase ComponentName }}Props> = memo((props: {{ properCase ComponentName }}Props) => {
{{else}}
export function {{ properCase ComponentName }}(props: Props) {
{{/if}}
{{#if wantSlice}}
    useInjectReducer({ key: {{ camelCase ServiceName }}Key, reducer: {{ camelCase ServiceName }}sReducer });
{{/if}}
{{#if wantRules}}
    useInjectReducer({ key: rulesPanelKey, reducer: rulesPanelReducer });
{{/if}}
{{#if wantSaga}}
    {{#if wantCreate}}useInjectSaga({ key: {{ camelCase ServiceName }}Key, saga: create{{> ServiceModel }}Saga });{{/if}}
    {{#if wantReadAll}}useInjectSaga({ key: {{ camelCase ServiceName }}Key, saga: getAll{{> ServiceModel }}sSaga });{{/if}}
    {{#if wantReadByID}}useInjectSaga({ key: {{ camelCase ServiceName }}Key, saga: get{{> ServiceModel }}ByIdSaga });{{/if}}
    {{#if wantUpdate}}useInjectSaga({ key: {{ camelCase ServiceName }}Key, saga: update{{> ServiceModel }}Saga });{{/if}}
    {{#if wantDelete}}useInjectSaga({ key: {{ camelCase ServiceName }}Key, saga: delete{{> ServiceModel }}Saga });{{/if}}
{{/if}}
    const [plantId] = useQueryParam<string>(FilterNames.plantId, '1', true);
        const dispatch = useDispatch();
{{#if wantSlice}}
    const {{> serviceModel }}s: {{> AnyModels }} = useSelector(select{{> ServiceModel }}s);
    const {{> serviceModel }}IsLoading: boolean = useSelector(select{{> ServiceModel }}IsLoading);
    const dispatch = useDispatch();
{{/if}}

{{#if wantTranslations}}    const { t /* , i18n */ } = useTranslation();{{/if}}
    const [filters{{#if wantFilters }}, setFilters{{/if}}] = useState<Filters>({
        [FilterNames.plantId]: plantId,
        ...buildFiltersFromData(pageFilters),
        // add your default filters for this page here ...
        [FilterNames.systemType]: 'SWS',
    });

{{#if wantSlice}}
    useEffect(() => {
        {{#if wantSaga}}{{#if wantReadAll}}dispatch({{ camelCase ServiceName }}sActions.getAll{{> ServiceModel }}s(filters));{{/if}}{{/if}}
    }, [dispatch, filters]);
{{/if}}

    {{#if wantLayout }}

    const [editPageLayout, setEditPageLayout] = useState<boolean>(false);
    const [layouts, setLayouts] = useLocalStorage<any>(Constant.storageKeys.{{ camelCase ComponentName }}Page, originalLayouts);

    const onHandleEditClick = () => {
        setEditPageLayout(!editPageLayout);
    };

    const onLayoutChange = (layout, layouts) => {
        setLayouts(layouts);
    };

    {{/if}}


    {{#if wantFilters }}

    const [availableFilters] = useState<DashboardFilter[]>(buildAvailableFiltersFromData(pageFilters));

    const onFilterChange = (filter: Filters) => {
        setFilters({ ...filters, ...filter });
    };
    {{/if}}

    {{#if wantDashboard }}
    const [loadingState, setLoadingState] = useState<LoadingValue>({});
    const updateLoadingState = (key: string, loading: boolean) => {
        loadingState[key] = loading;
        setLoadingState(loadingState);
    };
    const isLoading: boolean = useMemo(() => {
        return [
            ...(Object.values(loadingState) as boolean[]),
            // add your isLoading here
            {{#if wantSlice }}{{> serviceModel }}IsLoading{{/if}}
        ].reduce((acc: boolean, value: boolean) => {
            acc = acc ? acc : value;
            return acc;
        }, false);
    }, [
        loadingState
        // add your other Widget isLoading code here
        {{#if wantSlice }},{{> serviceModel }}IsLoading{{/if}}
    ]);

    const theme = useMemo(() => {
        const obj: any = {
            root: {
                '&$disabled': {
                    color: '#ffdb38',
                },
            },
            MuiTypography: {
                root: {
                    color: 'rgba(255, 255, 255, 0.54)',
                },
                colorTextPrimary: {
                    color: 'rgba(255, 255, 255, 0.54)',
                },
                colorTextSecondary: {
                    color: '#ffdb38',
                },
            },
            MuiBreadcrumbs: {
                separator: {
                    '&$before': {
                        content: '\u200B',
                    },
                },
            },
        };

        return createMuiTheme({
            overrides: { ...obj },
        });
    }, []);

    const crumbs = [
        { name: FilterNames.plantId, label: `Plant : ${plantId}` },
        { name: FilterNames.systemType, menu: filters[FilterNames.systemType], options: ['SWS', 'SPR', 'SAT'] },
    ];
    const onBreadcrumbChange = (crumb: string | Filters) => {
        if (typeof crumb === 'string') {
            // a link was selected to route to page
        }
        // a filter was selected so update filters
        // onFilterChange({ ...(crumb as Filters) } as any);
    };

    if (filters[FilterNames.deviceName]) {
        crumbs.push(filters[FilterNames.deviceName]);
    }

    const layoutProperties: any = useMemo(
        () => ({
            className: 'layout',
            width: 1200,
            breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },
            cols: { lg: 4, md: 2, sm: 1, xs: 1, xxs: 1 },
            autoSize: true,
            // compactType: 'vertical',
            // isBounded: true,
            {{#if wantLayout }}
            isDraggable: editPageLayout,
            isResizable: editPageLayout,
            layouts,
            {{/if}}
            rowHeight: 150,
            useCSSTransforms: true,
        }),
        {{#if wantLayout }}
        [layouts, editPageLayout],
        {{else}}
        []
        {{/if}}
    );
    {{/if}}

    {{#if wantRules}}
        const toggleDrawer = (open: boolean) => {
            dispatch(rulesPanelActions.openRulesPanel(open));
        };
    {{/if}}

return (
    <>
  {{#if wantHeaders}}
    <Helmet>
        {{#if wantTranslations}}
            <title>{t(messages.{{ camelCase ComponentName }}PageTitle)}</title>
        {{else}}
            <title>{{ camelCase ComponentName }}</title>
        {{/if}}

        <meta name="description" content="Description of {{properCase ComponentName}}" />
    </Helmet>
  {{/if}}


        <PageLayout
        {{#if wantFilters }}
            filters={filters}
            onFilterChange={onFilterChange} isLoading={isLoading}
        {{/if}}
            availableFilters={Array.from(availableFilters.values())}
        {{#if wantLayout }}
            onLayoutSwitch={onHandleEditClick}
            editPageLayout={editPageLayout}
        {{/if}}
        >

        <MuiThemeProvider theme={theme}>
      {{#if wantDashboard}}
        <Div className={'x-cls-{{dashCase ComponentName}}-body x-cls-data-panel-container'} >
            <Breadcrumb crumbs={crumbs} onClick={onBreadcrumbChange} />

            {{#if wantLayout}}
                <ResponsiveReactGridLayout onLayoutChange={(layout, layouts) => onLayoutChange(layout, layouts)} {...layoutProperties}>
            {{else}}
                <GridLayout style={ { height: '100%' } } className="layout" /* onSize={onSize} */ {...layoutProperties} >
            {{/if}}
                {{#if wantSlice}}<div className="x-cls-dashboard-item maximize-widget-width " key={`key-${Math.random()}`} data-grid={ { x: 0, y: 0, w: 1, h: 1, static: true } } ><Table columns={["Name", "Company", "City", "State"]} data={ {{> serviceModel }}s} /></div>{{/if}}
                    {{#each widgets}}
                    <div className="x-cls-dashboard-item {{#if ../wantFullscreen}}maximize-widget-width{{/if}} " key={`key-{{dashCase this}}-{{@index}}`} data-grid={ { ...{{properCase this }}Property.layout, static: false } } >
                    <{{this}} className={'x-cls-{{dashCase this}}-widget'} {{#if ../wantFilters }} filters={filters} onFilterChange={onFilterChange} {{/if}}  isLoading={(loading: boolean) => updateLoadingState('{{this}}Widget', loading)} />
                    </div>
                    {{/each}}
            {{#if wantLayout}}
                </ResponsiveReactGridLayout>
            {{else}}
                </GridLayout>
            {{/if}}
        </Div>
      {{else}}
        {{#if wantStyledComponents}}<Div{{else}}<div{{/if}} className={'x-cls-{{dashCase ComponentName}}-body'}>
          {{#if wantTranslations}}
              {t(messages.{{ camelCase ComponentName }}Title)}
          {{else}}
          <h1>{{ camelCase ComponentName }} Title</h1>
          {{/if}}

            {{#if wantSlice}}<Table columns={["Name", "Company", "City", "State"]} data={ {{> serviceModel }}s} />{{/if}}

          {{#if wantStyledComponents}}<Div{{else}}<div{{/if}} >{ {{> serviceModel }}s?.length } rows{{#if wantStyledComponents}}</Div>{{else}}</div>{{/if}}
          {{#if wantStyledComponents}}</Div>{{else}}</div>{{/if}}
      {{/if}}
          </MuiThemeProvider>
        </PageLayout>
        {{#if wantRules}}
            <RulesPanel
                toggleDrawer={toggleDrawer}
                keys={Object.keys({{> serviceModel }}s[0] || {})}
                data={ {{> serviceModel }}s || [] }
                onApply={(rules) => dispatch({{ camelCase ServiceName }}sActions.filter{{> ServiceModel }}sByRules(rules))}
            />
        {{/if}}
</>
);

{{#if wantMemo}}
});
{{else}}
};
{{/if}}

{{#if wantStyledComponents}}
const Div = styled.div``;
{{/if}}

export default  {{ properCase ComponentName }};

