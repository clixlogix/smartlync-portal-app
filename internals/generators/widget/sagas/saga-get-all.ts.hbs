import { /* take, */ call, put, select, takeLatest } from 'redux-saga/effects';
import { request } from 'utils/request';
import Constant from 'constants/index';
import { {{ camelCase ServiceName }}sActions } from 'services/{{dashCase ServiceName}}/{{dashCase ServiceName}}-reducer';
import { select{{ properCase ServiceName }}sFilters } from 'services/{{dashCase ServiceName}}/{{dashCase ServiceName}}-selectors';
import { selectAuthToken } from 'services/auth/auth-selectors';
import { Filters{{#if wantModel}}, {{ properCase ModelName }}s {{/if}} } from 'models';

/**
 *  repos request/response handler
 */
export function* getAll{{ properCase ServiceName }}s() {

    try {
        // Call our request helper (see 'utils/request')
        yield put({{ camelCase ServiceName }}sActions.loading(true));

        const { token } = yield select(selectAuthToken);
        const params: Filters = yield select(select{{ properCase ServiceName }}sFilters);

        if (!!token) {
            yield put(
                {{ camelCase ServiceName }}sActions.error({ name: 'error', message: 'cannot get data, not authenticated', data: {} }),
            );
            return;
        }

        const options: any = {
            url: Constant.{{#if wantModel}}{{ camelCase ModelName }}{{else}}{{ camelCase ServiceName }}{{/if}}s,
            method: 'GET',
            headers: {
                'Content-Type': 'application/json;charset=utf-8',
                Authorization: token,
            },
            params,
        };

        console.log('getAll{{ properCase ServiceName }}s.saga: getting {{ camelCase ServiceName }}s with (token, options) ', token, options);

        const {{ camelCase ServiceName }}s: {{#if wantModel}}{{ properCase ModelName }}s{{else}}any{{/if}} = yield call(request, options);

        console.log('getAll{{ properCase ServiceName }}s.saga: got results ({{ camelCase ServiceName }}s) ', {{ camelCase ServiceName }}s);

        yield put({{ camelCase ServiceName }}sActions.setAll{{> ServiceModel }}s({{ camelCase ServiceName }}s));
    } catch (err) {
        console.warn('getAll{{ properCase ServiceName }}s.saga.ERROR: got error (err) ', err);

        const { status = 0, message = '' } = { ...err.response };

        if (status === 401) {
            yield put({{ camelCase ServiceName }}sActions.error({ name: 'error', message: 'Authentication failed', data: { status, message } }));
        } else {
            yield put(
                {{ camelCase ServiceName }}sActions.error({ name: 'error', message: 'Getting {{ camelCase ServiceName }}s failed', data: { status, message } }),
            );
        }
    }

    yield put({{ camelCase ServiceName }}sActions.loading(false));
}

/**
 * Root saga manages watcher lifecycle
 */
export function* getAll{{ properCase ServiceName }}sSaga() {
    // Watches for get{{> ServiceModel }}s actions and calls get{{> ServiceModel }}s when one comes in.
    // By using `takeLatest` only the result of the latest API call is applied.
    // It returns task descriptor (just like fork) so we can continue execution
    // It will be cancelled automatically on component unmount
    yield takeLatest({{ camelCase ServiceName }}sActions.getAll{{> ServiceModel }}s.type, getAll{{ properCase ServiceName }}s);
}

export default getAll{{ properCase ServiceName }}sSaga;
