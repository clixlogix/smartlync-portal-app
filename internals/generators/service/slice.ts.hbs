/*
 * Msg Slice
 *
 * Here we define:
 * - The shape of our auth container's slice of Redux store,
 * - All the actions which can be triggered for this slice, including their effects on the store.
 *
 * Note that, while we are using dot notation in our reducer, we are not actually mutating the state
 * manually. Under the hood, we use immer to apply these updates to a new copy of the state.
 * Please see https://immerjs.github.io/immer/docs/introduction for more information.
 *
 */
import { PayloadAction } from '@reduxjs/toolkit';
import { createSlice } from 'utils/@reduxjs/toolkit';
import { CustomError } from 'utils/error';
import { Filters{{#if wantSlice}}{{#if wantModel}}, {{ properCase ModelName }}, {{ properCase ModelName }}s{{/if}}{{/if}} } from 'models';
import { {{ properCase ServiceName }}sState } from '.';
import data from './sagas/data';
import { filterByRule } from 'utils/filterByRule';
import { Rule } from 'components/panels/RulesPanel/RulesPanel';

// The initial state of the {{ properCase ServiceName }} page
export const initialState: {{ properCase ServiceName }}sState = {
    {{> serviceModel }}s: data,
    {{> serviceModel }}: undefined,
    {{> serviceModel }}sFilteredByRules: [],
    filters: {},

    error: undefined,
    isLoading: false,
};

/*
 *
 *
 */
const {{ camelCase ServiceName }}sSlice = createSlice({
    name: '{{> serviceModel }}s',
    initialState,
    reducers: {
        {{#if wantReadAll }}getAll{{> ServiceModel }}s(state, action: PayloadAction<Filters>) {
            state.filters = action.payload;
        },{{/if}}
        setAll{{> ServiceModel }}s(state, action: PayloadAction<{{> AnyModels }}>) {
            state.{{> serviceModel }}s = action.payload;
        },
        {{#if wantReadByID }}get{{> ServiceModel }}(state, action: PayloadAction<Filters>) {
            state.filters = action.payload;
        },{{/if}}
        set{{> ServiceModel }}(state, action: PayloadAction<{{> AnyModel }}>) {
            state.{{> serviceModel }} = action.payload;
        },
        {{#if wantUpdate }}update{{> ServiceModel }}(state, action: PayloadAction<Filters>) {
            state.filters = action.payload;
        },{{/if}}
        {{#if wantDelete }}delete{{> ServiceModel }}(state, action: PayloadAction<Filters>) {
            state.filters = action.payload;
        },{{/if}}
        {{#if wantCreate  }}create{{> ServiceModel }}(state, action: PayloadAction<Filters>) {
            state.filters = action.payload;
        },{{/if}}

        filter{{> ServiceModel }}sByRules(state, action: PayloadAction<Rule[]>) {
            state.{{> serviceModel }}sFilteredByRules = filterByRule(state.{{> serviceModel }}s, action.payload);
        },

        error(state, action: PayloadAction<CustomError>) {
            state.error = action.payload;
        },
        loading(state, action: PayloadAction<boolean>) {
            state.isLoading = action.payload;
        },
        clear(state) {
            state = { ...initialState };
        },
    },
});

export const { actions: {{ camelCase ServiceName }}Actions, reducer: {{ camelCase ServiceName }}Reducer, name: {{ camelCase ServiceName }}Key } = {{ camelCase ServiceName }}sSlice;
