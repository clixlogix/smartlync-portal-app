import { /* take, */ call, put, select, takeLatest } from 'redux-saga/effects';
import { request } from 'utils/request';
import Constant from 'constants/index';
import { {{ camelCase ServiceName }}Actions } from 'services/{{dashCase ServiceName}}/{{dashCase ServiceName}}-reducer';
import { select{{> ServiceModel }}Filters } from 'services/{{dashCase ServiceName}}/{{dashCase ServiceName}}-selectors';
import { selectAuthToken } from 'services/auth/auth-selectors';
import { Filters{{#if wantModel}}, {{ properCase ModelName }}{{/if}} } from 'models';

/**
 *  repos request/response handler
 */
export function* delete{{> ServiceModel }}() {

    try {
        // Call our request helper (see 'utils/request')
        yield put({{ camelCase ServiceName }}Actions.loading(true));

        const { token } = yield select(selectAuthToken);
        const { id, ...params}: Filters = yield select(select{{> ServiceModel }}Filters);

        if (!!token) {
            yield put(
                {{ camelCase ServiceName }}Actions.error({ name: 'error', message: 'cannot delete data, not authenticated', data: {} }),
            );
            return;
        }

        const options: any = {
            url: `${Constant.{{> serviceModel }}s}/${id}`,
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json;charset=utf-8',
                Authorization: token,
            },
            params,
        };

        console.log('delete{{> ServiceModel }}s.saga: deleting {{> serviceModel }} with (token, options) ', token, options);

        const {{> serviceModel }}: {{> AnyModel }} = yield call(request, options);

        console.log('delete{{> ServiceModel }}s.saga: got results ( {{> serviceModel }} ) ', {{> serviceModel }});

        yield put({{ camelCase ServiceName }}Actions.set{{> ServiceModel }}({{> serviceModel }}));
    } catch (err) {
        console.warn('delete{{> ServiceModel }}s.saga.ERROR: got error (err) ', err);

        const { status = 0, message = '' } = { ...err.response };

        if (status === 401) {
            yield put({{ camelCase ServiceName }}Actions.error({ name: 'error', message: 'Authentication failed', data: { status, message } }));
        } else {
            yield put(
                {{ camelCase ServiceName }}Actions.error({ name: 'error', message: 'Deleting {{> serviceModel }} failed', data: { status, message } }),
            );
        }
    }

    yield put({{ camelCase ServiceName }}Actions.loading(false));
}

/**
 * Root saga manages watcher lifecycle
 */
export function* delete{{> ServiceModel }}Saga() {
    // Watches for delete{{> ServiceModel }}s actions and calls delete{{> ServiceModel }}s when one comes in.
    // By using `takeLatest` only the result of the latest API call is applied.
    // It returns task descriptor (just like fork) so we can continue execution
    // It will be cancelled automatically on component unmount
    yield takeLatest({{ camelCase ServiceName }}Actions.delete{{> ServiceModel }}.type, delete{{> ServiceModel }});
}

export default delete{{> ServiceModel }}Saga;
